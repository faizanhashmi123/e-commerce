[
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "normpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "importPath": "application.constants",
        "description": "application.constants",
        "isExtraImport": true,
        "detail": "application.constants",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AccessMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "BaseDatatableView",
        "importPath": "django_datatables_view.base_datatable_view",
        "description": "django_datatables_view.base_datatable_view",
        "isExtraImport": true,
        "detail": "django_datatables_view.base_datatable_view",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "redirect_to_login",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_current_site",
        "importPath": "django.contrib.sites.shortcuts",
        "description": "django.contrib.sites.shortcuts",
        "isExtraImport": true,
        "detail": "django.contrib.sites.shortcuts",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "twilio.rest",
        "description": "twilio.rest",
        "isExtraImport": true,
        "detail": "twilio.rest",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "isExtraImport": true,
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "isExtraImport": true,
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "apps.customer.models",
        "description": "apps.customer.models",
        "isExtraImport": true,
        "detail": "apps.customer.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "isExtraImport": true,
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "Merchant",
        "importPath": "apps.merchant.models",
        "description": "apps.merchant.models",
        "isExtraImport": true,
        "detail": "apps.merchant.models",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "xlsxwriter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlsxwriter",
        "description": "xlsxwriter",
        "detail": "xlsxwriter",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "importPath": "apps.user.manager",
        "description": "apps.user.manager",
        "isExtraImport": true,
        "detail": "apps.user.manager",
        "documentation": {}
    },
    {
        "label": "USER_TYPE_CHOICES",
        "importPath": "apps.user.constants",
        "description": "apps.user.constants",
        "isExtraImport": true,
        "detail": "apps.user.constants",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "DJANGO_ROOT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGO_ROOT = dirname(dirname(abspath(__file__)))\n# fetch the project_root\nPROJECT_ROOT = dirname(DJANGO_ROOT)\n# the name of the whole site\nSITE_NAME = basename(DJANGO_ROOT)\n# collect static files here\nSTATIC_ROOT = join(PROJECT_ROOT, 'run', 'static')\n# collect media files here\nMEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')\n# look for static assets here",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "PROJECT_ROOT = dirname(DJANGO_ROOT)\n# the name of the whole site\nSITE_NAME = basename(DJANGO_ROOT)\n# collect static files here\nSTATIC_ROOT = join(PROJECT_ROOT, 'run', 'static')\n# collect media files here\nMEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')\n# look for static assets here\nSTATICFILES_DIRS = [\n    join(PROJECT_ROOT, 'static'),",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "SITE_NAME",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "SITE_NAME = basename(DJANGO_ROOT)\n# collect static files here\nSTATIC_ROOT = join(PROJECT_ROOT, 'run', 'static')\n# collect media files here\nMEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')\n# look for static assets here\nSTATICFILES_DIRS = [\n    join(PROJECT_ROOT, 'static'),\n]\n# look for templates here",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "STATIC_ROOT = join(PROJECT_ROOT, 'run', 'static')\n# collect media files here\nMEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')\n# look for static assets here\nSTATICFILES_DIRS = [\n    join(PROJECT_ROOT, 'static'),\n]\n# look for templates here\n# This is an internal setting, used in the TEMPLATES directive\nPROJECT_TEMPLATES = [",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "MEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')\n# look for static assets here\nSTATICFILES_DIRS = [\n    join(PROJECT_ROOT, 'static'),\n]\n# look for templates here\n# This is an internal setting, used in the TEMPLATES directive\nPROJECT_TEMPLATES = [\n    join(PROJECT_ROOT, 'templates'),\n]",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "STATICFILES_DIRS = [\n    join(PROJECT_ROOT, 'static'),\n]\n# look for templates here\n# This is an internal setting, used in the TEMPLATES directive\nPROJECT_TEMPLATES = [\n    join(PROJECT_ROOT, 'templates'),\n]\n# add apps/ to the Python path\nsys.path.append(normpath(join(PROJECT_ROOT, 'apps')))",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "PROJECT_TEMPLATES",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "PROJECT_TEMPLATES = [\n    join(PROJECT_ROOT, 'templates'),\n]\n# add apps/ to the Python path\nsys.path.append(normpath(join(PROJECT_ROOT, 'apps')))\nLOGIN_URL = 'admin-login'\nLOGOUT_REDIRECT_URL = 'admin-login'\n# ##### APPLICATION CONFIGURATION #########################\n# these are the apps\nDEFAULT_APPS = [",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "LOGIN_URL = 'admin-login'\nLOGOUT_REDIRECT_URL = 'admin-login'\n# ##### APPLICATION CONFIGURATION #########################\n# these are the apps\nDEFAULT_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'admin-login'\n# ##### APPLICATION CONFIGURATION #########################\n# these are the apps\nDEFAULT_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DEFAULT_APPS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DEFAULT_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'theme',\n    'apps.administrator',\n    'apps.user',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication'\n    ),\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser',\n        'rest_framework.parsers.JSONParser'],",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "MIDDLEWARE = [\n    'application.custom_classes.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': PROJECT_TEMPLATES,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.i18n',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "USE_I18N = False\n# ##### SECURITY CONFIGURATION ############################\n# We store the secret key here\n# The required SECRET_KEY is fetched at the end of this file\nSECRET_FILE = normpath(join(PROJECT_ROOT, 'run', 'SECRET.key'))\n# these persons receive error notification\nADMINS = (\n    ('your name', 'your_name@example.com'),\n)\nMANAGERS = ADMINS",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "SECRET_FILE",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "SECRET_FILE = normpath(join(PROJECT_ROOT, 'run', 'SECRET.key'))\n# these persons receive error notification\nADMINS = (\n    ('your name', 'your_name@example.com'),\n)\nMANAGERS = ADMINS\n# ##### DJANGO RUNNING CONFIGURATION ######################\n# the default WSGI application\nWSGI_APPLICATION = '%s.wsgi.application' % SITE_NAME\n# the root URL configuration",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "ADMINS = (\n    ('your name', 'your_name@example.com'),\n)\nMANAGERS = ADMINS\n# ##### DJANGO RUNNING CONFIGURATION ######################\n# the default WSGI application\nWSGI_APPLICATION = '%s.wsgi.application' % SITE_NAME\n# the root URL configuration\nROOT_URLCONF = '%s.urls' % SITE_NAME\n# the URL for static files",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "MANAGERS = ADMINS\n# ##### DJANGO RUNNING CONFIGURATION ######################\n# the default WSGI application\nWSGI_APPLICATION = '%s.wsgi.application' % SITE_NAME\n# the root URL configuration\nROOT_URLCONF = '%s.urls' % SITE_NAME\n# the URL for static files\nSTATIC_URL = '/static/'\n# the URL for media files\nMEDIA_URL = '/media/'",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "WSGI_APPLICATION = '%s.wsgi.application' % SITE_NAME\n# the root URL configuration\nROOT_URLCONF = '%s.urls' % SITE_NAME\n# the URL for static files\nSTATIC_URL = '/static/'\n# the URL for media files\nMEDIA_URL = '/media/'\n# ##### DEBUG CONFIGURATION ###############################\nDEBUG = False\n#### Project name confix",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "ROOT_URLCONF = '%s.urls' % SITE_NAME\n# the URL for static files\nSTATIC_URL = '/static/'\n# the URL for media files\nMEDIA_URL = '/media/'\n# ##### DEBUG CONFIGURATION ###############################\nDEBUG = False\n#### Project name confix\nAPP_NAME = APP_NAME\nSETTINGS_EXPORT = [",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "STATIC_URL = '/static/'\n# the URL for media files\nMEDIA_URL = '/media/'\n# ##### DEBUG CONFIGURATION ###############################\nDEBUG = False\n#### Project name confix\nAPP_NAME = APP_NAME\nSETTINGS_EXPORT = [\n    'APP_NAME',\n]",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "MEDIA_URL = '/media/'\n# ##### DEBUG CONFIGURATION ###############################\nDEBUG = False\n#### Project name confix\nAPP_NAME = APP_NAME\nSETTINGS_EXPORT = [\n    'APP_NAME',\n]\nSETTINGS_EXPORT_VARIABLE_NAME = 'configs'\nAUTH_USER_MODEL = 'user.User'",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DEBUG = False\n#### Project name confix\nAPP_NAME = APP_NAME\nSETTINGS_EXPORT = [\n    'APP_NAME',\n]\nSETTINGS_EXPORT_VARIABLE_NAME = 'configs'\nAUTH_USER_MODEL = 'user.User'\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "APP_NAME = APP_NAME\nSETTINGS_EXPORT = [\n    'APP_NAME',\n]\nSETTINGS_EXPORT_VARIABLE_NAME = 'configs'\nAUTH_USER_MODEL = 'user.User'\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "SETTINGS_EXPORT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "SETTINGS_EXPORT = [\n    'APP_NAME',\n]\nSETTINGS_EXPORT_VARIABLE_NAME = 'configs'\nAUTH_USER_MODEL = 'user.User'\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "SETTINGS_EXPORT_VARIABLE_NAME",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "SETTINGS_EXPORT_VARIABLE_NAME = 'configs'\nAUTH_USER_MODEL = 'user.User'\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\nCKEDITOR_UPLOAD_PATH = \"content_files/\"",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "AUTH_USER_MODEL = 'user.User'\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\nCKEDITOR_UPLOAD_PATH = \"content_files/\"\nCKEDITOR_CONFIGS = {",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\nCKEDITOR_UPLOAD_PATH = \"content_files/\"\nCKEDITOR_CONFIGS = {\n    'default': {",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "CKEDITOR_UPLOAD_PATH",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "CKEDITOR_UPLOAD_PATH = \"content_files/\"\nCKEDITOR_CONFIGS = {\n    'default': {\n        'toolbar': 'Custom',\n        'height': 500,\n        'width': 742,\n        'toolbar_Custom': [\n            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],\n            ['Link', 'Unlink', 'Anchor'],\n            ['Image', 'Flash', 'Table', 'HorizontalRule'],",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "CKEDITOR_CONFIGS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "CKEDITOR_CONFIGS = {\n    'default': {\n        'toolbar': 'Custom',\n        'height': 500,\n        'width': 742,\n        'toolbar_Custom': [\n            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],\n            ['Link', 'Unlink', 'Anchor'],\n            ['Image', 'Flash', 'Table', 'HorizontalRule'],\n            ['TextColor', 'BGColor'],",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_SIZE",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_SIZE = [300, 300]\nDJANGORESIZED_DEFAULT_QUALITY = 60\nDJANGORESIZED_DEFAULT_KEEP_META = True\nDJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'\nDJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': \".jpg\"}\nDJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_QUALITY",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_QUALITY = 60\nDJANGORESIZED_DEFAULT_KEEP_META = True\nDJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'\nDJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': \".jpg\"}\nDJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_KEEP_META",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_KEEP_META = True\nDJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'\nDJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': \".jpg\"}\nDJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_FORCE_FORMAT",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'\nDJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': \".jpg\"}\nDJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': \".jpg\"}\nDJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DJANGORESIZED_DEFAULT_NORMALIZE_ROTATION",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True\nFILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_PERMISSIONS",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "FILE_UPLOAD_PERMISSIONS = 0o644\nAPPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "APPEND_SLASH",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "APPEND_SLASH = False\nDATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DATA_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "application.settings.common",
        "description": "application.settings.common",
        "peekOfCode": "DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520",
        "detail": "application.settings.common",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "application.settings.development",
        "description": "application.settings.development",
        "peekOfCode": "DEBUG = True\n# allow all hosts during development\nALLOWED_HOSTS = ['*']\n# adjust the minimal login\n# LOGIN_URL = 'core_login'\n# LOGIN_REDIRECT_URL = '/'\n# LOGOUT_REDIRECT_URL = 'core_login'\n##### DATABASE CONFIGURATION ############################\nDATABASES = {\n    'default': {",
        "detail": "application.settings.development",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "application.settings.development",
        "description": "application.settings.development",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# adjust the minimal login\n# LOGIN_URL = 'core_login'\n# LOGIN_REDIRECT_URL = '/'\n# LOGOUT_REDIRECT_URL = 'core_login'\n##### DATABASE CONFIGURATION ############################\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': join(PROJECT_ROOT, 'run', 'dev.sqlite3'),",
        "detail": "application.settings.development",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "application.settings.development",
        "description": "application.settings.development",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': join(PROJECT_ROOT, 'run', 'dev.sqlite3'),\n    }\n}\n# ##### APPLICATION CONFIGURATION #########################\nINSTALLED_APPS = DEFAULT_APPS\n# AWS_ACCESS_KEY_ID = 'XIDXIUCLD462K3LHF3JW'\n# AWS_SECRET_ACCESS_KEY = 'nEhoMjGDNqmg7MMswN1TSSt1avm9c2aWfQi9lAAYQsg'",
        "detail": "application.settings.development",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "application.settings.development",
        "description": "application.settings.development",
        "peekOfCode": "INSTALLED_APPS = DEFAULT_APPS\n# AWS_ACCESS_KEY_ID = 'XIDXIUCLD462K3LHF3JW'\n# AWS_SECRET_ACCESS_KEY = 'nEhoMjGDNqmg7MMswN1TSSt1avm9c2aWfQi9lAAYQsg'\n#\n# AWS_STORAGE_BUCKET_NAME = 'koachfilm'\n# AWS_S3_ENDPOINT_URL = 'https://fra1.digitaloceanspaces.com'\n# AWS_S3_OBJECT_PARAMETERS = {\n#     'CacheControl': 'max-age=86400',\n# }\n# AWS_LOCATION = 'static'",
        "detail": "application.settings.development",
        "documentation": {}
    },
    {
        "label": "BUCKET_PATH",
        "kind": 5,
        "importPath": "application.settings.development",
        "description": "application.settings.development",
        "peekOfCode": "BUCKET_PATH = ''",
        "detail": "application.settings.development",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "LANGUAGE_CODE = 'de'\nTIME_ZONE = 'Europe/Berlin'\n# Internationalization\nUSE_I18N = True\n# Localisation\nUSE_L10N = True\n# enable timezone awareness by default\nUSE_TZ = True\n# This list of languages will be provided\nLANGUAGES = (",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "TIME_ZONE = 'Europe/Berlin'\n# Internationalization\nUSE_I18N = True\n# Localisation\nUSE_L10N = True\n# enable timezone awareness by default\nUSE_TZ = True\n# This list of languages will be provided\nLANGUAGES = (\n    ('en', _('English')),",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "USE_I18N = True\n# Localisation\nUSE_L10N = True\n# enable timezone awareness by default\nUSE_TZ = True\n# This list of languages will be provided\nLANGUAGES = (\n    ('en', _('English')),\n    ('de', _('German'))\n)",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "USE_L10N = True\n# enable timezone awareness by default\nUSE_TZ = True\n# This list of languages will be provided\nLANGUAGES = (\n    ('en', _('English')),\n    ('de', _('German'))\n)\n# Look for translations in these locations\nLOCALE_PATHS = (",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "USE_TZ = True\n# This list of languages will be provided\nLANGUAGES = (\n    ('en', _('English')),\n    ('de', _('German'))\n)\n# Look for translations in these locations\nLOCALE_PATHS = (\n    join(PROJECT_ROOT, 'locale'),\n)",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "LANGUAGES = (\n    ('en', _('English')),\n    ('de', _('German'))\n)\n# Look for translations in these locations\nLOCALE_PATHS = (\n    join(PROJECT_ROOT, 'locale'),\n)\n# Inject the localization middleware into the right position\nMIDDLEWARE = [y for i, x in enumerate(MIDDLEWARE) for y in (",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "LOCALE_PATHS = (\n    join(PROJECT_ROOT, 'locale'),\n)\n# Inject the localization middleware into the right position\nMIDDLEWARE = [y for i, x in enumerate(MIDDLEWARE) for y in (\n    ('django.middleware.locale.LocaleMiddleware', x) if MIDDLEWARE[i-1] == \\\n    'django.contrib.sessions.middleware.SessionMiddleware' else (x, ))]",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "application.settings.i18n",
        "description": "application.settings.i18n",
        "peekOfCode": "MIDDLEWARE = [y for i, x in enumerate(MIDDLEWARE) for y in (\n    ('django.middleware.locale.LocaleMiddleware', x) if MIDDLEWARE[i-1] == \\\n    'django.contrib.sessions.middleware.SessionMiddleware' else (x, ))]",
        "detail": "application.settings.i18n",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "application.settings.production",
        "description": "application.settings.production",
        "peekOfCode": "DEBUG = True\n# You will have to determine, which hostnames should be served by Django\nALLOWED_HOSTS = ['*']\n# ##### SECURITY CONFIGURATION ############################\n# TODO: Make sure, that sensitive information uses https\n# TODO: Evaluate the following settings, before uncommenting them\n# redirects all requests to https\n# SECURE_SSL_REDIRECT = True\n# session cookies will only be set, if https is used\n# SESSION_COOKIE_SECURE = True",
        "detail": "application.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "application.settings.production",
        "description": "application.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# ##### SECURITY CONFIGURATION ############################\n# TODO: Make sure, that sensitive information uses https\n# TODO: Evaluate the following settings, before uncommenting them\n# redirects all requests to https\n# SECURE_SSL_REDIRECT = True\n# session cookies will only be set, if https is used\n# SESSION_COOKIE_SECURE = True\n# how long is a session cookie valid?\n# SESSION_COOKIE_AGE = 1209600",
        "detail": "application.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "application.settings.production",
        "description": "application.settings.production",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'arcDBDjango',\n        'USER': 'arcUser',\n        'PASSWORD': 'jhy6RXH*ywu!epn9wmn',\n        'HOST': 'SG-arc-rdbms-3742-pgsql-master.servers.mongodirector.com',\n        'PORT': '6432'\n    }\n}",
        "detail": "application.settings.production",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "application.settings.staging",
        "description": "application.settings.staging",
        "peekOfCode": "DEBUG = True\n# allow all hosts during development\nALLOWED_HOSTS = ['*']\n# adjust the minimal login\n# LOGIN_URL = 'core_login'\n# LOGIN_REDIRECT_URL = '/'\n# LOGOUT_REDIRECT_URL = 'core_login'\n# ##### DATABASE CONFIGURATION ############################\n# DATABASES = {\n#     'default': {",
        "detail": "application.settings.staging",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "application.settings.staging",
        "description": "application.settings.staging",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# adjust the minimal login\n# LOGIN_URL = 'core_login'\n# LOGIN_REDIRECT_URL = '/'\n# LOGOUT_REDIRECT_URL = 'core_login'\n# ##### DATABASE CONFIGURATION ############################\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': join(PROJECT_ROOT, 'run', 'dev.sqlite3'),",
        "detail": "application.settings.staging",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "kind": 5,
        "importPath": "application.constants",
        "description": "application.constants",
        "peekOfCode": "APP_NAME = 'Arthonsys Django Starter'",
        "detail": "application.constants",
        "documentation": {}
    },
    {
        "label": "AjayDatatableView",
        "kind": 6,
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "peekOfCode": "class AjayDatatableView(BaseDatatableView):\n    extra_search_columns = []\n    exclude_from_search_columns = []\n    def get_filter_method(self):\n        return self.FILTER_ICONTAINS\n    def filter_queryset(self, qs):\n        columns = self._columns\n        if not self.pre_camel_case_notation:\n            # get global search value\n            search = self._querydict.get('search[value]', None)",
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "UserRequiredMixin",
        "kind": 6,
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "peekOfCode": "class UserRequiredMixin(AccessMixin):\n    \"\"\"Verify that the current user is authenticated.\"\"\"\n    login_url = 'user-login'\n    def dispatch(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return redirect_to_login(self.request.get_full_path(), self.get_login_url(), self.get_redirect_field_name())\n        elif not (request.user.is_superuser or request.user.is_staff):\n            return super().dispatch(request, *args, **kwargs)\n        else:\n            raise Http404",
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "kind": 6,
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "peekOfCode": "class AdminRequiredMixin(AccessMixin):\n    login_url = 'admin-login'\n    def dispatch(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return redirect_to_login(self.request.get_full_path(), self.get_login_url(), self.get_redirect_field_name())\n        elif request.user.is_superuser or request.user.is_staff:\n            return super().dispatch(request, *args, **kwargs)\n        raise Http404\nclass CorsMiddleware(object):\n    def __init__(self, get_response):",
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "CorsMiddleware",
        "kind": 6,
        "importPath": "application.custom_classes",
        "description": "application.custom_classes",
        "peekOfCode": "class CorsMiddleware(object):\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = self.get_response(request)\n        if (request.method == \"OPTIONS\"  and \"HTTP_ACCESS_CONTROL_REQUEST_METHOD\" in request.META):\n            response = http.HttpResponse()\n            response[\"Content-Length\"] = \"0\"\n            response[\"Access-Control-Max-Age\"] = 86400\n        response[\"Access-Control-Allow-Origin\"] = \"*\"",
        "detail": "application.custom_classes",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "kind": 6,
        "importPath": "application.custom_models",
        "description": "application.custom_models",
        "peekOfCode": "class DateTimeModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    created_by = models.CharField(max_length=50, blank=True, null=True)\n    updated_by = models.CharField(max_length=50, blank=True, null=True)\n    class Meta:\n        abstract = True\n        ordering = ('-created_at',)",
        "detail": "application.custom_models",
        "documentation": {}
    },
    {
        "label": "EmailThread",
        "kind": 6,
        "importPath": "application.email_helper",
        "description": "application.email_helper",
        "peekOfCode": "class EmailThread(threading.Thread):\n    def __init__(self, to, template, context, subject):\n        self.to = to\n        self.template = template\n        self.context = context\n        self.subject = subject\n        threading.Thread.__init__(self)\n    def run(self):\n        from_email = None\n        html_content = render_to_string(self.template, self.context)  # render with dynamic value",
        "detail": "application.email_helper",
        "documentation": {}
    },
    {
        "label": "get_domain_protocol",
        "kind": 2,
        "importPath": "application.email_helper",
        "description": "application.email_helper",
        "peekOfCode": "def get_domain_protocol(request):\n    current_site = get_current_site(request)\n    domain = current_site.domain\n    return domain, 'http'\ndef send_email(request, to, template, context={}, subject='Welcome'):\n    context['domain'], context['protocol'] = get_domain_protocol(request)\n    subject, from_email, to = subject, None, to\n    html_content = render_to_string(template, context)  # render with dynamic value\n    text_content = strip_tags(html_content)  # Strip the html tag. So people can see the pure text at least.\n    # create the email, and attach the HTML version as well.",
        "detail": "application.email_helper",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "application.email_helper",
        "description": "application.email_helper",
        "peekOfCode": "def send_email(request, to, template, context={}, subject='Welcome'):\n    context['domain'], context['protocol'] = get_domain_protocol(request)\n    subject, from_email, to = subject, None, to\n    html_content = render_to_string(template, context)  # render with dynamic value\n    text_content = strip_tags(html_content)  # Strip the html tag. So people can see the pure text at least.\n    # create the email, and attach the HTML version as well.\n    msg = EmailMultiAlternatives(subject, text_content, from_email, [to])\n    msg.attach_alternative(html_content, \"text/html\")\n    msg.send()\ndef send_email_background(request, to, template, context={}, subject='Welcome'):",
        "detail": "application.email_helper",
        "documentation": {}
    },
    {
        "label": "send_email_background",
        "kind": 2,
        "importPath": "application.email_helper",
        "description": "application.email_helper",
        "peekOfCode": "def send_email_background(request, to, template, context={}, subject='Welcome'):\n    context['domain'], context['protocol'] = get_domain_protocol(request)\n    EmailThread(to, template, context, subject).start()\nclass EmailThread(threading.Thread):\n    def __init__(self, to, template, context, subject):\n        self.to = to\n        self.template = template\n        self.context = context\n        self.subject = subject\n        threading.Thread.__init__(self)",
        "detail": "application.email_helper",
        "documentation": {}
    },
    {
        "label": "MediaStorage",
        "kind": 6,
        "importPath": "application.storage_backends",
        "description": "application.storage_backends",
        "peekOfCode": "class MediaStorage(S3Boto3Storage):\n    location = 'media'\n    file_overwrite = False",
        "detail": "application.storage_backends",
        "documentation": {}
    },
    {
        "label": "TokenGenerator",
        "kind": 6,
        "importPath": "application.token",
        "description": "application.token",
        "peekOfCode": "class TokenGenerator(PasswordResetTokenGenerator):\n    def _make_hash_value(self, user, timestamp):\n        return (\n            six.text_type(user.pk) + six.text_type(timestamp) +\n            six.text_type(user.is_active)\n        )\naccount_activation_token = TokenGenerator()",
        "detail": "application.token",
        "documentation": {}
    },
    {
        "label": "account_activation_token",
        "kind": 5,
        "importPath": "application.token",
        "description": "application.token",
        "peekOfCode": "account_activation_token = TokenGenerator()",
        "detail": "application.token",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "application.urls",
        "description": "application.urls",
        "peekOfCode": "urlpatterns = [\n    # admin urls\n    path('', include('apps.administrator.urls')),\n    # enable the admin interface\n    url(r'^administration', admin.site.urls),\n    # auth urls\n    path('password_reset/', PasswordResetView.as_view(\n        html_email_template_name='registration/password_reset_email.html'\n    ), name='password_reset'),\n    # path('', include('django.contrib.auth.urls')),",
        "detail": "application.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "application.wsgi",
        "description": "application.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "application.wsgi",
        "documentation": {}
    },
    {
        "label": "AdministratorConfig",
        "kind": 6,
        "importPath": "apps.administrator.apps",
        "description": "apps.administrator.apps",
        "peekOfCode": "class AdministratorConfig(AppConfig):\n    name = 'administrator'",
        "detail": "apps.administrator.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.administrator.urls",
        "description": "apps.administrator.urls",
        "peekOfCode": "urlpatterns = [\n    # Auth Urls\n    path('admin/login/', AdminLoginView.as_view(), name=\"admin-login\"),\n    path('admin/dashboard/', AdminDashboardView.as_view(), name=\"admin-dashboard\"),\n    path('admin/logout/', AdminLogoutView.as_view(), name=\"admin-logout\"),\n    path('admin/change-password/', AdminChangePasswordView.as_view(), name=\"admin-change-password\"),\n]",
        "detail": "apps.administrator.urls",
        "documentation": {}
    },
    {
        "label": "AdminLoginView",
        "kind": 6,
        "importPath": "apps.administrator.views",
        "description": "apps.administrator.views",
        "peekOfCode": "class AdminLoginView(View):\n    template_name = 'administrator/login.html'\n    success_url = 'admin-dashboard'\n    login_url = 'admin-login'\n    success_message = 'You have successfully logged in.'\n    failure_message = 'Please check credentials.'\n    def get(self, request):\n        if request.user.is_authenticated and (request.user.is_superuser or request.user.is_staff):\n            return HttpResponseRedirect(reverse(self.success_url))\n        return render(request, self.template_name)",
        "detail": "apps.administrator.views",
        "documentation": {}
    },
    {
        "label": "AdminLogoutView",
        "kind": 6,
        "importPath": "apps.administrator.views",
        "description": "apps.administrator.views",
        "peekOfCode": "class AdminLogoutView(AdminRequiredMixin, LoginRequiredMixin, View):\n    def get(self, request):\n        logout(request)\n        messages.success(request, 'You have successfully logged out.')\n        return redirect('admin-login')\nclass AdminChangePasswordView(AdminRequiredMixin, LoginRequiredMixin, View):\n    template_name = 'administrator/change_password.html'\n    def get(self, request):\n        form = PasswordChangeForm(request.user)\n        return render(request, self.template_name, {'form': form})",
        "detail": "apps.administrator.views",
        "documentation": {}
    },
    {
        "label": "AdminChangePasswordView",
        "kind": 6,
        "importPath": "apps.administrator.views",
        "description": "apps.administrator.views",
        "peekOfCode": "class AdminChangePasswordView(AdminRequiredMixin, LoginRequiredMixin, View):\n    template_name = 'administrator/change_password.html'\n    def get(self, request):\n        form = PasswordChangeForm(request.user)\n        return render(request, self.template_name, {'form': form})\n    def post(self, request):\n        form = PasswordChangeForm(request.user, request.POST)\n        if form.is_valid():\n            user = form.save()\n            update_session_auth_hash(request, user)  # Important!",
        "detail": "apps.administrator.views",
        "documentation": {}
    },
    {
        "label": "AdminDashboardView",
        "kind": 6,
        "importPath": "apps.administrator.views",
        "description": "apps.administrator.views",
        "peekOfCode": "class AdminDashboardView(AdminRequiredMixin, LoginRequiredMixin, View):\n    def get(self, request):\n        users_count = User.objects.filter(is_staff=False).count()\n        # emporia usage data\n        now = datetime.datetime.now()\n        data_list = []\n        label = []\n        context = {\n                    'users_count': users_count,\n                    'label': label,",
        "detail": "apps.administrator.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.administrator.views",
        "description": "apps.administrator.views",
        "peekOfCode": "User = get_user_model()\nfrom django.http import HttpResponseRedirect\n@method_decorator(never_cache, name='dispatch')\nclass AdminLoginView(View):\n    template_name = 'administrator/login.html'\n    success_url = 'admin-dashboard'\n    login_url = 'admin-login'\n    success_message = 'You have successfully logged in.'\n    failure_message = 'Please check credentials.'\n    def get(self, request):",
        "detail": "apps.administrator.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.cart.migrations.0001_initial",
        "description": "apps.cart.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "apps.cart.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.cart.migrations.0002_wishlist_item",
        "description": "apps.cart.migrations.0002_wishlist_item",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('product', '0001_initial'),\n        ('cart', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='wishlist',\n            name='item',",
        "detail": "apps.cart.migrations.0002_wishlist_item",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.cart.migrations.0003_auto_20230814_1704",
        "description": "apps.cart.migrations.0003_auto_20230814_1704",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('cart', '0002_wishlist_item'),\n        ('product', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('customer', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(",
        "detail": "apps.cart.migrations.0003_auto_20230814_1704",
        "documentation": {}
    },
    {
        "label": "CartConfig",
        "kind": 6,
        "importPath": "apps.cart.apps",
        "description": "apps.cart.apps",
        "peekOfCode": "class CartConfig(AppConfig):\n    name = 'cart'",
        "detail": "apps.cart.apps",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class Cart(DateTimeModel):\n    owner = models.ForeignKey(Customer,  on_delete=models.CASCADE, blank=True)\n    item = models.ForeignKey(Product, on_delete=models.CASCADE, blank=True)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return str(self.id)\nclass Order(DateTimeModel):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    date_ordered = models.DateTimeField(default=timezone.now)\n    is_complete = models.BooleanField(default=False)",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class Order(DateTimeModel):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    date_ordered = models.DateTimeField(default=timezone.now)\n    is_complete = models.BooleanField(default=False)\n    def __str__(self):\n        return f\"Order #{self.pk}\"\nclass OrderItem(DateTimeModel):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class OrderItem(DateTimeModel):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return f\"{self.product.name} - {self.quantity}\"\nclass Checkout(DateTimeModel):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "Checkout",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class Checkout(DateTimeModel):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)\n    items = models.ManyToManyField(Product, through='CheckoutItem')\n    full_name = models.CharField(max_length=100)\n    email = models.EmailField()\n    phone_number = models.CharField(max_length=15)\n    shipping_address = models.CharField(max_length=255)\n    city = models.CharField(max_length=100)",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "CheckoutItem",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class CheckoutItem(DateTimeModel):\n    checkout = models.ForeignKey(Checkout, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return f\"{self.quantity} x {self.product.name} - ${self.price}\"\nclass Coupon(DateTimeModel):\n    code = models.CharField(max_length=50, unique=True)\n    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2)",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "Coupon",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class Coupon(DateTimeModel):\n    code = models.CharField(max_length=50, unique=True)\n    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2)\n    valid_from = models.DateTimeField(default=timezone.now)\n    valid_to = models.DateTimeField()\n    is_active = models.BooleanField(default=True)\n    minimum_purchase_amount = models.DecimalField(max_digits=10, decimal_places=2)\n    max_usage_count = models.PositiveIntegerField(default=1)\n    times_used = models.PositiveIntegerField(default=0)\n    def __str__(self):",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "Wishlist",
        "kind": 6,
        "importPath": "apps.cart.models",
        "description": "apps.cart.models",
        "peekOfCode": "class Wishlist(models.Model):\n    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n    item = models.ForeignKey(Product, on_delete=models.CASCADE)  # Assuming you have a Product model\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.item.name",
        "detail": "apps.cart.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.customer.migrations.0001_initial",
        "description": "apps.customer.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "apps.customer.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.customer.migrations.0002_customer_user",
        "description": "apps.customer.migrations.0002_customer_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('customer', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customer',\n            name='user',",
        "detail": "apps.customer.migrations.0002_customer_user",
        "documentation": {}
    },
    {
        "label": "CustomerConfig",
        "kind": 6,
        "importPath": "apps.customer.apps",
        "description": "apps.customer.apps",
        "peekOfCode": "class CustomerConfig(AppConfig):\n    name = 'customer'",
        "detail": "apps.customer.apps",
        "documentation": {}
    },
    {
        "label": "CreateCustomerUserForm",
        "kind": 6,
        "importPath": "apps.customer.forms",
        "description": "apps.customer.forms",
        "peekOfCode": "class CreateCustomerUserForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields.pop('password2')\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = ['email', 'password1']\nclass CreateCustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer",
        "detail": "apps.customer.forms",
        "documentation": {}
    },
    {
        "label": "CreateCustomerForm",
        "kind": 6,
        "importPath": "apps.customer.forms",
        "description": "apps.customer.forms",
        "peekOfCode": "class CreateCustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['first_name','phone_number']\nclass EditCustomerUserForm(UserChangeForm):\n    class Meta:\n        model = User\n        fields = ['email', 'is_active', 'password']",
        "detail": "apps.customer.forms",
        "documentation": {}
    },
    {
        "label": "EditCustomerUserForm",
        "kind": 6,
        "importPath": "apps.customer.forms",
        "description": "apps.customer.forms",
        "peekOfCode": "class EditCustomerUserForm(UserChangeForm):\n    class Meta:\n        model = User\n        fields = ['email', 'is_active', 'password']",
        "detail": "apps.customer.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.customer.forms",
        "description": "apps.customer.forms",
        "peekOfCode": "User = get_user_model()\nclass CreateCustomerUserForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields.pop('password2')\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = ['email', 'password1']\nclass CreateCustomerForm(forms.ModelForm):\n    class Meta:",
        "detail": "apps.customer.forms",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "apps.customer.models",
        "description": "apps.customer.models",
        "peekOfCode": "class Customer(DateTimeModel):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='customer_user',null=True)\n    first_name = models.CharField('Full Name', max_length=30, blank=True)\n    phone_number = models.BigIntegerField(blank=True, null=True, unique=True)\n    def __str__(self):\n        return self.user.first_name\n    def delete(self, using=None):\n        if self.user:\n            self.user.delete()\n        super(Customer, self).delete(using)",
        "detail": "apps.customer.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.customer.urls",
        "description": "apps.customer.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', CustomerCreateView.as_view(), name='register_customer'),\n    path('login/', CustomerLogin.as_view(), name='login'),\n    path('website/', WebisteView.as_view(), name='website'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('customer-list/', CreateCustomerView.as_view(), name='customer_list'),\n    path('Customer/list/ajax', ListCustomerViewJson.as_view(), name='Customer-list-ajax'),\n    path('Customer/delete/<int:pk>', DeleteCustomerView.as_view(), name='Customer-user-delete'),\n    path('Customer/update/<int:pk>', CustomerUpdateView.as_view(), name='Customer-user-update'),\n    path('change_customer_status/<int:pk>/<str:is_active>/',change_customer_status, name='change_customer_status'),",
        "detail": "apps.customer.urls",
        "documentation": {}
    },
    {
        "label": "CustomerCreateView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class CustomerCreateView(CreateView):\n    model = Customer\n    form_class = CreateCustomerForm\n    user_form_class = CreateCustomerUserForm\n    template_name = 'customer/register.html'\n    success_message = \"Customer created successfully\"\n    success_url = reverse_lazy('login')\n    def get(self, request, *args, **kwargs):\n        form = self.form_class()\n        user_form = self.user_form_class()",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "CustomerLogin",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class CustomerLogin(View):\n    success_message = 'You have successfully logged in.'\n    failure_message = 'Please check credentials.'\n    def get(self, request, *args, **kwargs):\n        return render(request, 'customer/login.html')\n    def post(self, request):\n        username = request.POST['email']\n        password = request.POST['password']\n        user = authenticate(request, username=username,\n                            password=password)",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "WebisteView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class WebisteView(TemplateView):\n    template_name = 'customer/index.html'\nclass ContactView(TemplateView):\n    template_name = 'customer/contact.html'\nclass CreateCustomerView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'customer/list.html'\nclass ListCustomerViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Customer\n    columns = ['first_name', 'phone_number', 'user.email','user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "ContactView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class ContactView(TemplateView):\n    template_name = 'customer/contact.html'\nclass CreateCustomerView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'customer/list.html'\nclass ListCustomerViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Customer\n    columns = ['first_name', 'phone_number', 'user.email','user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['first_name','phone_number']\n    def get_initial_queryset(self):",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "CreateCustomerView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class CreateCustomerView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'customer/list.html'\nclass ListCustomerViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Customer\n    columns = ['first_name', 'phone_number', 'user.email','user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['first_name','phone_number']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "ListCustomerViewJson",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class ListCustomerViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Customer\n    columns = ['first_name', 'phone_number', 'user.email','user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['first_name','phone_number']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'user.is_active':\n            if row.user.is_active:",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "DeleteCustomerView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class DeleteCustomerView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Customer\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)\ndef change_customer_status(request, pk, is_active):\n    user = Customer.objects.filter(user__id=pk).first().user\n    user.is_active = is_active\n    user.save()",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "CustomerUpdateView",
        "kind": 6,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "class CustomerUpdateView(AdminRequiredMixin, LoginRequiredMixin,UpdateView):\n    model = Customer\n    form_class = CreateCustomerForm\n    user_form_class = EditCustomerUserForm\n    template_name = 'customer/form.html'\n    success_message = \"Customer updated successfully\"\n    success_url = reverse_lazy('customer_list')\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        if 'form' not in context:",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "change_customer_status",
        "kind": 2,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "def change_customer_status(request, pk, is_active):\n    user = Customer.objects.filter(user__id=pk).first().user\n    user.is_active = is_active\n    user.save()\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\nclass CustomerUpdateView(AdminRequiredMixin, LoginRequiredMixin,UpdateView):\n    model = Customer\n    form_class = CreateCustomerForm\n    user_form_class = EditCustomerUserForm\n    template_name = 'customer/form.html'",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.customer.views",
        "description": "apps.customer.views",
        "peekOfCode": "User = get_user_model()\nclass CustomerCreateView(CreateView):\n    model = Customer\n    form_class = CreateCustomerForm\n    user_form_class = CreateCustomerUserForm\n    template_name = 'customer/register.html'\n    success_message = \"Customer created successfully\"\n    success_url = reverse_lazy('login')\n    def get(self, request, *args, **kwargs):\n        form = self.form_class()",
        "detail": "apps.customer.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.customersupport.migrations.0001_initial",
        "description": "apps.customersupport.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contact',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "apps.customersupport.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.customersupport.migrations.0002_supportticket_user",
        "description": "apps.customersupport.migrations.0002_supportticket_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('customersupport', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='supportticket',\n            name='user',",
        "detail": "apps.customersupport.migrations.0002_supportticket_user",
        "documentation": {}
    },
    {
        "label": "CustomersupportConfig",
        "kind": 6,
        "importPath": "apps.customersupport.apps",
        "description": "apps.customersupport.apps",
        "peekOfCode": "class CustomersupportConfig(AppConfig):\n    name = 'customersupport'",
        "detail": "apps.customersupport.apps",
        "documentation": {}
    },
    {
        "label": "SupportTicketForm",
        "kind": 6,
        "importPath": "apps.customersupport.forms",
        "description": "apps.customersupport.forms",
        "peekOfCode": "class SupportTicketForm(forms.ModelForm):\n    class Meta:\n        model = SupportTicket\n        fields = ['subject', 'description', 'status']\n# class CustomSupportUserCreationForm(UserCreationForm):\n#     def __init__(self, *args, **kwargs):\n#         super().__init__(*args, **kwargs)\n#         self.fields.pop('password2')\n#\n#     class Meta(UserCreationForm.Meta):",
        "detail": "apps.customersupport.forms",
        "documentation": {}
    },
    {
        "label": "SupportTicket",
        "kind": 6,
        "importPath": "apps.customersupport.models",
        "description": "apps.customersupport.models",
        "peekOfCode": "class SupportTicket(DateTimeModel):\n    STATUS_CHOICES = (\n        ('Open', 'Open'),\n        ('In Progress', 'In Progress'),\n        ('Resolved', 'Resolved'),\n        ('Closed', 'Closed'),\n    )\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='customer_support', null=True)\n    # customer = models.ForeignKey(User, on_delete=models.CASCADE)\n    subject = models.CharField(max_length=100)",
        "detail": "apps.customersupport.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "apps.customersupport.models",
        "description": "apps.customersupport.models",
        "peekOfCode": "class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.name} - {self.subject}\"",
        "detail": "apps.customersupport.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.customersupport.urls",
        "description": "apps.customersupport.urls",
        "peekOfCode": "urlpatterns = [\n    path('customersupport/list/', ListCustomerSupportView.as_view(), name='customersupport-list'),\n    path('customersupport_create/list/', CreateCustomerSupportView.as_view(), name='customersupport-create'),\n    path('customersupport_create/ajx/list/', ListCustomerSupportJson.as_view(), name='customersupport-ajax-list'),\n    path('customersupport_create/update/<int:pk>/', UpdateCustomerSupportView.as_view(), name='update-customersupport'),\n    path('customersupport_create/delete/<int:pk>', DeleteCustomerSupportView.as_view(), name='delete-CustomerSupport'),\n]",
        "detail": "apps.customersupport.urls",
        "documentation": {}
    },
    {
        "label": "CreateCustomerSupportView",
        "kind": 6,
        "importPath": "apps.customersupport.views",
        "description": "apps.customersupport.views",
        "peekOfCode": "class CreateCustomerSupportView(View):\n    template_name = 'customer_support/form.html'\n    success_message = \"customer_support created successfully\"\n    success_url = 'customersupport-list'\n    def get(self, request):\n        form = SupportTicketForm()\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = SupportTicketForm(request.POST)\n        if form.is_valid():",
        "detail": "apps.customersupport.views",
        "documentation": {}
    },
    {
        "label": "ListCustomerSupportView",
        "kind": 6,
        "importPath": "apps.customersupport.views",
        "description": "apps.customersupport.views",
        "peekOfCode": "class ListCustomerSupportView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'customer_support/list.html'\nclass ListCustomerSupportJson(AdminRequiredMixin, AjayDatatableView):\n    model = SupportTicket\n    columns = ['subject', 'description', 'status','actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['subject','description']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):",
        "detail": "apps.customersupport.views",
        "documentation": {}
    },
    {
        "label": "ListCustomerSupportJson",
        "kind": 6,
        "importPath": "apps.customersupport.views",
        "description": "apps.customersupport.views",
        "peekOfCode": "class ListCustomerSupportJson(AdminRequiredMixin, AjayDatatableView):\n    model = SupportTicket\n    columns = ['subject', 'description', 'status','actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['subject','description']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'is_active':\n            if row.is_active:",
        "detail": "apps.customersupport.views",
        "documentation": {}
    },
    {
        "label": "UpdateCustomerSupportView",
        "kind": 6,
        "importPath": "apps.customersupport.views",
        "description": "apps.customersupport.views",
        "peekOfCode": "class UpdateCustomerSupportView(AdminRequiredMixin, LoginRequiredMixin,UpdateView):\n    model = SupportTicket\n    template_name = 'customer_support/form.html'\n    form_class = SupportTicketForm\n    success_message = \"Customer support updated successfully\"\n    success_url = 'customersupport-list'\n    def get_object(self, queryset=None):\n        ticket_id = self.kwargs.get('pk')\n        return get_object_or_404(SupportTicket, pk=ticket_id)\n    def form_valid(self, form):",
        "detail": "apps.customersupport.views",
        "documentation": {}
    },
    {
        "label": "DeleteCustomerSupportView",
        "kind": 6,
        "importPath": "apps.customersupport.views",
        "description": "apps.customersupport.views",
        "peekOfCode": "class DeleteCustomerSupportView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = SupportTicket\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)",
        "detail": "apps.customersupport.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.merchant.migrations.0001_initial",
        "description": "apps.merchant.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Merchant',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "apps.merchant.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.merchant.migrations.0002_merchant_user",
        "description": "apps.merchant.migrations.0002_merchant_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('merchant', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='merchant',\n            name='user',",
        "detail": "apps.merchant.migrations.0002_merchant_user",
        "documentation": {}
    },
    {
        "label": "MerchantConfig",
        "kind": 6,
        "importPath": "apps.merchant.apps",
        "description": "apps.merchant.apps",
        "peekOfCode": "class MerchantConfig(AppConfig):\n    name = 'merchant'",
        "detail": "apps.merchant.apps",
        "documentation": {}
    },
    {
        "label": "CreateMerchantForm",
        "kind": 6,
        "importPath": "apps.merchant.forms",
        "description": "apps.merchant.forms",
        "peekOfCode": "class CreateMerchantForm(forms.ModelForm):\n    class Meta:\n        model = Merchant\n        fields = ['phone_number']\nclass CustomUserCreationForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields.pop('password2')\n    class Meta(UserCreationForm.Meta):\n        model = User",
        "detail": "apps.merchant.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "apps.merchant.forms",
        "description": "apps.merchant.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields.pop('password2')\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = ['first_name', 'email', 'password1']\nclass EditMerchantUserForm(UserChangeForm):\n    type = forms.CharField(widget=forms.HiddenInput(), initial='merchant')\n    class Meta:",
        "detail": "apps.merchant.forms",
        "documentation": {}
    },
    {
        "label": "EditMerchantUserForm",
        "kind": 6,
        "importPath": "apps.merchant.forms",
        "description": "apps.merchant.forms",
        "peekOfCode": "class EditMerchantUserForm(UserChangeForm):\n    type = forms.CharField(widget=forms.HiddenInput(), initial='merchant')\n    class Meta:\n        model = User\n        fields = ['email', 'type', 'is_active', 'password']\nclass EditMerchantForm(forms.ModelForm):\n    class Meta:\n        model = Merchant\n        fields = ['phone_number']",
        "detail": "apps.merchant.forms",
        "documentation": {}
    },
    {
        "label": "EditMerchantForm",
        "kind": 6,
        "importPath": "apps.merchant.forms",
        "description": "apps.merchant.forms",
        "peekOfCode": "class EditMerchantForm(forms.ModelForm):\n    class Meta:\n        model = Merchant\n        fields = ['phone_number']",
        "detail": "apps.merchant.forms",
        "documentation": {}
    },
    {
        "label": "Merchant",
        "kind": 6,
        "importPath": "apps.merchant.models",
        "description": "apps.merchant.models",
        "peekOfCode": "class Merchant(DateTimeModel):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='merchant_user')\n    description = models.TextField()\n    phone_number = models.BigIntegerField(blank=True, null=True, unique=True)\n    address = models.CharField(max_length=200)\n    def __str__(self):\n        return self.user.email\n    def delete(self, using=None):\n        if self.user:\n            self.user.delete()",
        "detail": "apps.merchant.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.merchant.urls",
        "description": "apps.merchant.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/merchant/', CreateMerchantView.as_view(), name='register-merchant'),\n    path('merchent/list/', ListMerchantView.as_view(), name='merchant-list'),\n    path('merchent/list/ajax', ListMerchantViewJson.as_view(), name='merchant-list-ajax'),\n    path('change_merchant_status/<int:pk>/<str:is_active>/', Change_Merchant_Status,\n         name='change-merchant-status'),\n    path('delete/<int:pk>', DeleteMerchantView.as_view(), name='merchant-delete'),\n    path('update/<int:pk>', UpdateMerchantView.as_view(), name='merchant-update'),\n]",
        "detail": "apps.merchant.urls",
        "documentation": {}
    },
    {
        "label": "CreateMerchantView",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class CreateMerchantView(CreateView):\n    model = Merchant\n    form_class = CreateMerchantForm\n    user_form_class = CustomUserCreationForm\n    template_name = 'merchant/register.html'\n    success_message = \"Merchant created successfully\"\n    success_url = reverse_lazy('login')\n    def get(self, request):\n        form = self.form_class()\n        user_form = self.user_form_class()",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "MerchantLogin",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class MerchantLogin(View):\n    def get(self, request, *args, **kwargs):\n        return render(request, 'customer/login.html')\n    def post(self, request):\n        username = request.POST['email']\n        password = request.POST['password']\n        user = authenticate(request, username=username,\n                            password=password)\n        if user is not None:\n            login(request, user)",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "ListMerchantView",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class ListMerchantView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'merchant/list.html'\nclass ListMerchantViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Merchant\n    columns = ['user.first_name', 'user.email', 'phone_number', 'user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['user.first_name', 'user.email','phone_number']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "ListMerchantViewJson",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class ListMerchantViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = Merchant\n    columns = ['user.first_name', 'user.email', 'phone_number', 'user.is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    extra_search_columns = ['user.first_name', 'user.email','phone_number']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'user.is_active':\n            if row.user.is_active:",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "DeleteMerchantView",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class DeleteMerchantView(LoginRequiredMixin, DeleteView):\n    model = Merchant\n    success_message = 'Merchant deleted Successfully.'\n    success_url = reverse_lazy('merchant-list')\n    def delete(self, request, *args, **kwargs):\n        messages.success(self.request, self.success_message)\n        return super(DeleteMerchantView, self).delete(request, *args, **kwargs)\nclass UpdateMerchantView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Merchant\n    form_class = EditMerchantForm",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "UpdateMerchantView",
        "kind": 6,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "class UpdateMerchantView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Merchant\n    form_class = EditMerchantForm\n    user_form_class = EditMerchantUserForm\n    template_name = 'merchant/form.html'\n    success_message = \"Merchant updated successfully\"\n    success_url = reverse_lazy('merchant-list')\n    def get_context_data(self, **kwargs):\n        self.object = self.get_object()\n        context = super(UpdateMerchantView, self).get_context_data(**kwargs)",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "Change_Merchant_Status",
        "kind": 2,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "def Change_Merchant_Status(request, pk, is_active):\n    user = Merchant.objects.filter(user__id=pk).first().user\n    user.is_active = is_active\n    user.save()\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\nclass DeleteMerchantView(LoginRequiredMixin, DeleteView):\n    model = Merchant\n    success_message = 'Merchant deleted Successfully.'\n    success_url = reverse_lazy('merchant-list')\n    def delete(self, request, *args, **kwargs):",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.merchant.views",
        "description": "apps.merchant.views",
        "peekOfCode": "User = get_user_model()\nclass CreateMerchantView(CreateView):\n    model = Merchant\n    form_class = CreateMerchantForm\n    user_form_class = CustomUserCreationForm\n    template_name = 'merchant/register.html'\n    success_message = \"Merchant created successfully\"\n    success_url = reverse_lazy('login')\n    def get(self, request):\n        form = self.form_class()",
        "detail": "apps.merchant.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.product.migrations.0001_initial",
        "description": "apps.product.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('merchant', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Brand',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.product.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ProductConfig",
        "kind": 6,
        "importPath": "apps.product.apps",
        "description": "apps.product.apps",
        "peekOfCode": "class ProductConfig(AppConfig):\n    name = 'product'",
        "detail": "apps.product.apps",
        "documentation": {}
    },
    {
        "label": "ProductImportForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class ProductImportForm(forms.ModelForm):\n    class Meta:\n        model = ProductImport\n        fields = ['file_name']\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields =['CategoryName','CategoryDescription']\nclass SubCategoriesForm(forms.ModelForm):\n    class Meta:",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields =['CategoryName','CategoryDescription']\nclass SubCategoriesForm(forms.ModelForm):\n    class Meta:\n        model = SubCategories\n        fields = ['name', 'description', 'parent_category']\nclass BrandForm(forms.ModelForm):\n    class Meta:",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "SubCategoriesForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class SubCategoriesForm(forms.ModelForm):\n    class Meta:\n        model = SubCategories\n        fields = ['name', 'description', 'parent_category']\nclass BrandForm(forms.ModelForm):\n    class Meta:\n        model = Brand\n        fields = ['name', 'description']        \nclass ProductForm(forms.ModelForm):\n    class Meta:",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "BrandForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class BrandForm(forms.ModelForm):\n    class Meta:\n        model = Brand\n        fields = ['name', 'description']        \nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['merchant', 'subcategories_id', 'product_name',\n                  'brand', 'image',\n                  'product_max_price', 'product_discount_price',",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "ProductForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['merchant', 'subcategories_id', 'product_name',\n                  'brand', 'image',\n                  'product_max_price', 'product_discount_price',\n                  'product_description',\n                  'product_long_description', 'in_stock_total']\nclass ProductImageForm(forms.ModelForm):\n    class Meta:",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "ProductImageForm",
        "kind": 6,
        "importPath": "apps.product.forms",
        "description": "apps.product.forms",
        "peekOfCode": "class ProductImageForm(forms.ModelForm):\n    class Meta:\n        model = ProductImage\n        fields = '__all__'",
        "detail": "apps.product.forms",
        "documentation": {}
    },
    {
        "label": "ProductImport",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class ProductImport(models.Model):\n    file_name = models.FileField(upload_to='uploads')\nclass Category(DateTimeModel):\n    CategoryName = models.CharField(max_length=100)\n    CategoryDescription = models.TextField()\n    def __str__(self):\n        return self.CategoryName\nclass SubCategories(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class Category(DateTimeModel):\n    CategoryName = models.CharField(max_length=100)\n    CategoryDescription = models.TextField()\n    def __str__(self):\n        return self.CategoryName\nclass SubCategories(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    parent_category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='subcategories')\n    def __str__(self):",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "SubCategories",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class SubCategories(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    parent_category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='subcategories')\n    def __str__(self):\n        return self.name\nclass Brand(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    def __str__(self):",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "Brand",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class Brand(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\nclass Product(models.Model):\n    merchant = models.ForeignKey(Merchant, on_delete=models.CASCADE)\n    subcategories_id = models.ForeignKey(SubCategories, on_delete=models.CASCADE, null=True)\n    product_name = models.CharField(max_length=255)\n    brand = models.ForeignKey(Brand, on_delete=models.CASCADE, null=True)",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class Product(models.Model):\n    merchant = models.ForeignKey(Merchant, on_delete=models.CASCADE)\n    subcategories_id = models.ForeignKey(SubCategories, on_delete=models.CASCADE, null=True)\n    product_name = models.CharField(max_length=255)\n    brand = models.ForeignKey(Brand, on_delete=models.CASCADE, null=True)\n    image = models.ImageField(upload_to='product_images/', blank=True, null=True)\n    product_max_price = models.CharField(max_length=255,null=True)\n    product_discount_price = models.CharField(max_length=255,null=True)\n    product_description = models.TextField()\n    product_long_description = models.TextField(blank=True, null=True)",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "ProductImage",
        "kind": 6,
        "importPath": "apps.product.models",
        "description": "apps.product.models",
        "peekOfCode": "class ProductImage(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')\n    image1 = models.ImageField(upload_to='product_images/')\n    image2 = models.ImageField(upload_to='product_images/', blank=True, null=True)\n    image3 = models.ImageField(upload_to='product_images/', blank=True, null=True)\n    image4 = models.ImageField(upload_to='product_images/', blank=True, null=True)\n    description = models.TextField(blank=True)",
        "detail": "apps.product.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.product.urls",
        "description": "apps.product.urls",
        "peekOfCode": "urlpatterns = [\n    # category url #\n    path('category/list/', ListCategoryView.as_view(), name='category-list'),\n    path('create/', CategoryCreateView.as_view(), name='create_category'),\n    path('category_create/ajx/list/', ListCategoryJson.as_view(), name='category-ajax-list'),\n    path('category/<int:pk>/update/', CategoryUpdateView.as_view(), name='category-update'),\n    path('category/delete/<int:pk>', DeleteCategoryView.as_view(), name='category-delete'),\n    # subcategory url #\n    path('subcategory/list/', ListSubCategoryView.as_view(), name='subcategory-list'),\n    path('create-subcategory/', SubCategoryCreateView.as_view(), name='create_subcategory'),",
        "detail": "apps.product.urls",
        "documentation": {}
    },
    {
        "label": "CategoryCreateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class CategoryCreateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = Category\n    form_class = CategoryForm\n    template_name = 'category/form.html'\n    success_message = \"Category created successfully\"\n    success_url = reverse_lazy('category-list')\nclass ListCategoryView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'category/list.html'\nclass ListCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = Category",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListCategoryView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListCategoryView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'category/list.html'\nclass ListCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = Category\n    columns = ['CategoryName', 'CategoryDescription','actions']\n    exclude_from_search_columns = ['actions']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'is_active':",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListCategoryJson",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = Category\n    columns = ['CategoryName', 'CategoryDescription','actions']\n    exclude_from_search_columns = ['actions']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'is_active':\n            if row.is_active:\n                return '<span class=\"badge badge-success\">Active</span>'",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "CategoryUpdateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class CategoryUpdateView(AdminRequiredMixin, LoginRequiredMixin,SuccessMessageMixin,UpdateView):\n    model = Category\n    template_name = 'category/form.html'\n    form_class = CategoryForm\n    success_message = \"Category updated successfully\"\n    success_url = reverse_lazy('category-list')\nclass DeleteCategoryView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Category\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "DeleteCategoryView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class DeleteCategoryView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Category\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)\n# Subcategory view #\nclass SubCategoryCreateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin,CreateView):\n    model = SubCategories\n    form_class = SubCategoriesForm",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryCreateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class SubCategoryCreateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin,CreateView):\n    model = SubCategories\n    form_class = SubCategoriesForm\n    template_name = 'subcategory/form.html'\n    success_message = \"Category created successfully\"\n    success_url = reverse_lazy('subcategory-list')\nclass ListSubCategoryView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'subcategory/list.html'\nclass ListSubCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = SubCategories",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListSubCategoryView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListSubCategoryView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'subcategory/list.html'\nclass ListSubCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = SubCategories\n    columns = ['name', 'description','parent_category','actions']\n    exclude_from_search_columns = ['actions']\n    def filter_queryset(self, qs):\n        search_value = self.request.GET.get('search[value]', None)\n        if search_value:\n            qs = qs.filter(",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListSubCategoryJson",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListSubCategoryJson(AdminRequiredMixin, AjayDatatableView):\n    model = SubCategories\n    columns = ['name', 'description','parent_category','actions']\n    exclude_from_search_columns = ['actions']\n    def filter_queryset(self, qs):\n        search_value = self.request.GET.get('search[value]', None)\n        if search_value:\n            qs = qs.filter(\n                Q(name__icontains=search_value) | Q(parent_category__CategoryName__icontains=search_value)\n            )",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryUpdateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class SubCategoryUpdateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = SubCategories\n    template_name = 'subcategory/form.html'\n    form_class = SubCategoriesForm\n    success_message = \"SubCategory updated successfully\"\n    success_url = reverse_lazy('subcategory-list')\nclass BrandListView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'brand/list.html'\nclass BrandListJson(AdminRequiredMixin, AjayDatatableView):\n    model = Brand",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "BrandListView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class BrandListView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'brand/list.html'\nclass BrandListJson(AdminRequiredMixin, AjayDatatableView):\n    model = Brand\n    columns = ['name','description','actions']\n    exclude_from_search_columns = ['actions']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'actions':",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "BrandListJson",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class BrandListJson(AdminRequiredMixin, AjayDatatableView):\n    model = Brand\n    columns = ['name','description','actions']\n    exclude_from_search_columns = ['actions']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'actions':\n            edit_action = '<a href={} role=\"button\" class=\"btn btn-warning btn-xs mr-1 text-white\">Edit</a>'.format(\n                reverse('brand-edit', kwargs={'pk': row.pk}))",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "CreateBrandView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class CreateBrandView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = Brand\n    form_class = BrandForm\n    template_name = \"brand/form.html\"\n    success_message = \"Brand created successfully\"\n    success_url = reverse_lazy('brand-list')\nclass BrandUpdateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Brand\n    form_class = BrandForm\n    template_name = 'brand/form.html'",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "BrandUpdateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class BrandUpdateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Brand\n    form_class = BrandForm\n    template_name = 'brand/form.html'\n    success_message = \"brand Updated successfully\"\n    success_url = reverse_lazy('brand-list')\nclass DeleteBrandView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Brand\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "DeleteBrandView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class DeleteBrandView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Brand\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)\n# Product View #\nclass ProductCreateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin,CreateView):\n    model = Product\n    form_class = ProductForm",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductCreateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductCreateView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin,CreateView):\n    model = Product\n    form_class = ProductForm\n    template_name = 'product/form.html'\n    success_message = \"Product created successfully\"\n    success_url = reverse_lazy('product-list')\nclass ListProductView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'product/list.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListProductView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListProductView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'product/list.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['data'] = Product.objects.values(\"merchant_id\",\"merchant__user__email\").distinct()\n        return context\nclass ListProductJson(AdminRequiredMixin, AjayDatatableView):\n    model = Product\n    columns = ['merchant.user.email', 'subcategories_id', 'product_name', 'brand',\n               'image', 'product_max_price', 'product_discount_price',",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ListProductJson",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ListProductJson(AdminRequiredMixin, AjayDatatableView):\n    model = Product\n    columns = ['merchant.user.email', 'subcategories_id', 'product_name', 'brand',\n               'image', 'product_max_price', 'product_discount_price',\n               'product_description', 'product_long_description',\n               'in_stock_total', 'actions']\n    exclude_from_search_columns = ['actions','subcategories_id','brand']\n    def get_initial_queryset(self):\n        merchant_id = self.request.GET.get(\"merchant_id\")\n        print(\"check\", merchant_id)",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductUpdateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductUpdateView(AdminRequiredMixin, LoginRequiredMixin,SuccessMessageMixin,UpdateView):\n    model = Product\n    form_class = ProductForm\n    template_name = 'product/form.html'\n    success_message = \"Product Updated successfully\"\n    success_url = reverse_lazy('product-list')\nclass DeleteProductView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Product\n    def delete(self, request, *args,  **kwargs):\n        self.get_object().delete()",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "DeleteProductView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class DeleteProductView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = Product\n    def delete(self, request, *args,  **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)\n####brand####\n########## import view  is underprocess view it's may not work or not work at all!\nclass ProductImportView(CreateView):\n    form_class = ProductImportForm",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductImportView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductImportView(CreateView):\n    form_class = ProductImportForm\n    template_name = 'product/import.html'\n    success_url = reverse_lazy('product-list')\n    def form_valid(self, form):\n        excel_file = self.request.FILES.get('excel_file')\n        if excel_file:\n            try:\n                df = pd.read_excel(excel_file)\n                for index, row in df.iterrows():",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductExportView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductExportView(View):\n    def get(self, request, *args, **kwargs):\n        merchant = request.GET.get('merchant')\n        products = Product.objects.all()\n        if merchant != \"--Select Merchant--\" and merchant:\n            products = products.filter(merchant__user__email=merchant)\n        else:\n            products = Product.objects.all()\n        output = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n        output['Content-Disposition'] = 'attachment; filename=product_export.xlsx'",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductImgae",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductImgae(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'productimage/list.html'\nclass ProductImageCreateView(View):\n    template_name = 'productimage/form.html'\n    def get(self, request, *args, **kwargs):\n        form = ProductImageForm()\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = ProductImageForm(request.POST, request.FILES)\n        if form.is_valid():",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductImageCreateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductImageCreateView(View):\n    template_name = 'productimage/form.html'\n    def get(self, request, *args, **kwargs):\n        form = ProductImageForm()\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = ProductImageForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.save()\n            return redirect('image-list')",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ImgaeListJson",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ImgaeListJson(AdminRequiredMixin, AjayDatatableView):\n    model = ProductImage\n    columns = ['product','image1','image2','image3','image4','description','actions']\n    exclude_from_search_columns = ['actions']\n    def get_initial_queryset(self):\n        return self.model.objects.all()\n    def render_column(self, row, column):\n        if column == 'actions':\n            edit_action = '<a href={} role=\"button\" class=\"btn btn-warning btn-xs mr-1 text-white\">Edit</a>'.format(\n                reverse('product_image_update', kwargs={'pk': row.pk}))",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "ProductImageUpdateView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class ProductImageUpdateView(View):\n    template_name = 'productimage/form.html'\n    def get(self, request, *args, **kwargs):\n        instance = get_object_or_404(ProductImage, pk=kwargs['pk'])\n        form = ProductImageForm(instance=instance)\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        instance = get_object_or_404(ProductImage, pk=kwargs['pk'])\n        form = ProductImageForm(request.POST, request.FILES, instance=instance)\n        if form.is_valid():",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "DeleteProductImageView",
        "kind": 6,
        "importPath": "apps.product.views",
        "description": "apps.product.views",
        "peekOfCode": "class DeleteProductImageView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = ProductImage\n    def delete(self, request, *args,  **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)",
        "detail": "apps.product.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.user.migrations.0001_initial",
        "description": "apps.user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0011_update_proxy_permissions'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "apps.user.apps",
        "description": "apps.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    name = 'user'",
        "detail": "apps.user.apps",
        "documentation": {}
    },
    {
        "label": "USER_TYPE_CHOICES",
        "kind": 5,
        "importPath": "apps.user.constants",
        "description": "apps.user.constants",
        "peekOfCode": "USER_TYPE_CHOICES = [\n        ('admin', 'admin'),\n        ('customer', 'customer'),\n        ('merchant', 'merchant'),\n        ('customersupport', 'customersupport'),\n]",
        "detail": "apps.user.constants",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "apps.user.forms",
        "description": "apps.user.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    type = forms.CharField(widget=forms.HiddenInput(), initial='admin')\n    is_active = forms.BooleanField(initial=True)\n    is_admin = forms.BooleanField(widget=forms.HiddenInput(), initial=True)\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email', 'is_active', 'type', 'is_admin', 'password1', 'password2']\nclass EditUserForm(UserChangeForm):\n    email = forms.EmailField(required=True)",
        "detail": "apps.user.forms",
        "documentation": {}
    },
    {
        "label": "EditUserForm",
        "kind": 6,
        "importPath": "apps.user.forms",
        "description": "apps.user.forms",
        "peekOfCode": "class EditUserForm(UserChangeForm):\n    email = forms.EmailField(required=True)\n    password_help_text =\"Raw passwords are not stored, so there is no way to see this \\n user's password, but you can change the password using \\n <a href=\\\"{}\\\">this form</a>.\"\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email', 'is_active', 'password']\n    def __init__(self, *args, **kwargs):\n        super(EditUserForm, self).__init__(*args, **kwargs)\n        password = self.fields.get('password')\n        # if password:",
        "detail": "apps.user.forms",
        "documentation": {}
    },
    {
        "label": "UserSignupForm",
        "kind": 6,
        "importPath": "apps.user.forms",
        "description": "apps.user.forms",
        "peekOfCode": "class UserSignupForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    class Meta:\n        model = User\n        fields = (\"first_name\", \"last_name\", \"email\", \"password1\", \"password2\")\n    def save(self, commit=True):\n        user = super(UserSignupForm, self).save(commit=False)\n        user.email = self.cleaned_data['email']\n        if commit:\n            user.save()",
        "detail": "apps.user.forms",
        "documentation": {}
    },
    {
        "label": "EditUserProfileForm",
        "kind": 6,
        "importPath": "apps.user.forms",
        "description": "apps.user.forms",
        "peekOfCode": "class EditUserProfileForm(forms.ModelForm):\n    email = forms.EmailField(required=True)\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']",
        "detail": "apps.user.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.user.forms",
        "description": "apps.user.forms",
        "peekOfCode": "User = get_user_model()\nclass CreateUserForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    type = forms.CharField(widget=forms.HiddenInput(), initial='admin')\n    is_active = forms.BooleanField(initial=True)\n    is_admin = forms.BooleanField(widget=forms.HiddenInput(), initial=True)\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email', 'is_active', 'type', 'is_admin', 'password1', 'password2']\nclass EditUserForm(UserChangeForm):",
        "detail": "apps.user.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "apps.user.manager",
        "description": "apps.user.manager",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    \"\"\"\n    Custom user model manager where email is the unique identifiers\n    for authentication instead of usernames.\n    \"\"\"\n    def create_user(self, email, password, **extra_fields):\n        \"\"\"\n        Create and save a User with the given email and password.\n        \"\"\"\n        if not email:",
        "detail": "apps.user.manager",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "peekOfCode": "class User(AbstractUser):\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []\n    first_name = models.CharField('First name', max_length=30, blank=True)\n    last_name = models.CharField('Last name', max_length=150, blank=True)\n    username = models.EmailField(\n        'username', unique=True, help_text='Username.', null=True\n    )\n    email = models.EmailField(\n        'Email address', unique=True, help_text='Email address.', null=True",
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "peekOfCode": "class Profile(DateTimeModel):\n    user = models.OneToOneField(User, null=True, on_delete=models.CASCADE, related_name='profile')\n    def __str__(self):\n        if self.user:\n            return self.user.first_name + ' ' + self.user.last_name if self.user.first_name and self.user.last_name  else self.user.email\n        else:\n            return str(self.id)",
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.user.urls",
        "description": "apps.user.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin\n    path('admin/user/add', CreateUserView.as_view(), name='admin-user-add'),\n    path('admin/user/', ListUserView.as_view(), name='admin-user-list'),\n    path('admin/user/list/ajax', ListUserViewJson.as_view(), name='admin-user-list-ajax'),\n    path('admin/user/edit/<int:pk>', UpdateUserView.as_view(), name='admin-user-edit'),\n    path('admin/user/delete/<int:pk>', DeleteUserView.as_view(), name='admin-user-delete'),\n]",
        "detail": "apps.user.urls",
        "documentation": {}
    },
    {
        "label": "CreateUserView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class CreateUserView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = User\n    form_class = CreateUserForm\n    template_name = 'admin/user/form.html'\n    success_message = \"User created successfully\"\n    success_url = reverse_lazy('admin-user-list')\nclass UpdateUserView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    form_class = EditUserForm\n    template_name = 'admin/user/form.html'",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "UpdateUserView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class UpdateUserView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    form_class = EditUserForm\n    template_name = 'admin/user/form.html'\n    success_message = \"User updated successfully\"\n    success_url = reverse_lazy('admin-user-list')\nclass ListUserView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'admin/user/list.html'\nclass ListUserViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = User",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "ListUserView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class ListUserView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'admin/user/list.html'\nclass ListUserViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = User\n    columns = ['first_name', 'last_name', 'email', 'is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    # extra_search_columns = ['']\n    def get_initial_queryset(self):\n        return self.model.objects.filter(is_admin=True)\n    def render_column(self, row, column):",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "ListUserViewJson",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class ListUserViewJson(AdminRequiredMixin, AjayDatatableView):\n    model = User\n    columns = ['first_name', 'last_name', 'email', 'is_active', 'actions']\n    exclude_from_search_columns = ['actions']\n    # extra_search_columns = ['']\n    def get_initial_queryset(self):\n        return self.model.objects.filter(is_admin=True)\n    def render_column(self, row, column):\n        if column == 'is_active':\n            if row.is_active:",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "DeleteUserView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class DeleteUserView(AdminRequiredMixin, LoginRequiredMixin, DeleteView):\n    model = User\n    def delete(self, request, *args, **kwargs):\n        self.get_object().delete()\n        payload = {'delete': 'ok'}\n        return JsonResponse(payload)\nclass ChangeUserPasswordView(AdminRequiredMixin, LoginRequiredMixin, View):\n    form_class = SetPasswordForm\n    template_name = 'admin/user/change_password.html'\n    success_message = 'Password Updated Successfully!'",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "ChangeUserPasswordView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class ChangeUserPasswordView(AdminRequiredMixin, LoginRequiredMixin, View):\n    form_class = SetPasswordForm\n    template_name = 'admin/user/change_password.html'\n    success_message = 'Password Updated Successfully!'\n    def get(self, request, user_id, *args, **kwargs):\n        form = self.form_class(get_object_or_404(User, pk=user_id))\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, user_id, *args, **kwargs):\n        form = self.form_class(get_object_or_404(User, pk=user_id), request.POST)\n        if form.is_valid():",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "ListEmporiaView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class ListEmporiaView(AdminRequiredMixin, LoginRequiredMixin, TemplateView):\n    template_name = 'admin/user/emporia_list.html'\n@method_decorator(never_cache, name='dispatch')\nclass LandingView(View):\n    admin_home_url = 'admin-dashboard'\n    user_home_url = 'user-home'\n    user_login_url = 'user-login'\n    def get(self, request):\n        if request.user.is_authenticated and not (request.user.is_superuser or request.user.is_staff):\n            return HttpResponseRedirect(reverse(self.user_home_url))",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "LandingView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class LandingView(View):\n    admin_home_url = 'admin-dashboard'\n    user_home_url = 'user-home'\n    user_login_url = 'user-login'\n    def get(self, request):\n        if request.user.is_authenticated and not (request.user.is_superuser or request.user.is_staff):\n            return HttpResponseRedirect(reverse(self.user_home_url))\n        if request.user.is_authenticated and (request.user.is_superuser or request.user.is_staff):\n            return HttpResponseRedirect(reverse(self.admin_home_url))\n        return HttpResponseRedirect(reverse(self.user_login_url))",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "User = get_user_model()\nclass CreateUserView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = User\n    form_class = CreateUserForm\n    template_name = 'admin/user/form.html'\n    success_message = \"User created successfully\"\n    success_url = reverse_lazy('admin-user-list')\nclass UpdateUserView(AdminRequiredMixin, LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    form_class = EditUserForm",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "#needs_sphinx",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.todo',\n    'sphinx.ext.coverage',\n    'sphinx.ext.viewcode',\n]",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.todo',\n    'sphinx.ext.coverage',\n    'sphinx.ext.viewcode',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'django-project-skeleton'\ncopyright = u'2018, Mischback'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'django-project-skeleton'\ncopyright = u'2018, Mischback'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'django-project-skeleton'\ncopyright = u'2018, Mischback'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'django-project-skeleton'\ncopyright = u'2018, Mischback'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.4'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "project = u'django-project-skeleton'\ncopyright = u'2018, Mischback'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.4'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.4'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "copyright = u'2018, Mischback'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.4'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.4'\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "version = '1.4'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.4'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# There are two options for replacing |today|: either, you set today to some",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "release = '1.4'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n# The reST default role (used for this markup: `text`) to use for all",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "exclude_patterns = []\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#add_module_names",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#show_authors",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#modindex_common_prefix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#keep_warnings",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "html_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_title",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_short_title",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_logo",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_extra_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sphinx",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Language to be used for generating the HTML full-text search index.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_copyright",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Language to be used for generating the HTML full-text search index.\n# Sphinx supports the following languages:\n#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Language to be used for generating the HTML full-text search index.\n# Sphinx supports the following languages:\n#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'\n#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'\n#html_search_language = 'en'\n# A dictionary with options for the search language support, empty by default.\n# Now only 'ja' uses this config value",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_file_suffix = None\n# Language to be used for generating the HTML full-text search index.\n# Sphinx supports the following languages:\n#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'\n#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'\n#html_search_language = 'en'\n# A dictionary with options for the search language support, empty by default.\n# Now only 'ja' uses this config value\n#html_search_options = {'type': 'default'}\n# The name of a javascript file (relative to the configuration directory) that",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_search_language",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_search_language = 'en'\n# A dictionary with options for the search language support, empty by default.\n# Now only 'ja' uses this config value\n#html_search_options = {'type': 'default'}\n# The name of a javascript file (relative to the configuration directory) that\n# implements a search results scorer. If empty, the default will be used.\n#html_search_scorer = 'scorer.js'\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'django-project-skeletondoc'\n# -- Options for LaTeX output ---------------------------------------------",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_search_options",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_search_options = {'type': 'default'}\n# The name of a javascript file (relative to the configuration directory) that\n# implements a search results scorer. If empty, the default will be used.\n#html_search_scorer = 'scorer.js'\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'django-project-skeletondoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_search_scorer",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_search_scorer = 'scorer.js'\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'django-project-skeletondoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "htmlhelp_basename = 'django-project-skeletondoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n# Latex figure (float) alignment",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "latex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n# Latex figure (float) alignment\n#'figure_align': 'htbp',\n}",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'django-project-skeleton.tex', u'django-project-skeleton Documentation',\n   u'Mischback', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_pagerefs",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_urls",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',\n     [u'Mischback'], 1)\n]",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',\n     [u'Mischback'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "man_pages = [\n    ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',\n     [u'Mischback'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#man_show_urls",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',\n   u'Mischback', 'django-project-skeleton', 'One line description of project.',\n   'Miscellaneous'),\n]",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "texinfo_documents = [\n  ('index', 'django-project-skeleton', u'django-project-skeleton Documentation',\n   u'Mischback', 'django-project-skeleton', 'One line description of project.',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_appendices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_show_urls",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_no_detailmenu",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_no_detailmenu = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "active",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def active(context, pattern_or_urlname):\n    try:\n        pattern = '^' + reverse(pattern_or_urlname)\n    except NoReverseMatch:\n        pattern = pattern_or_urlname\n    path = context['request'].path\n    if re.search(pattern, path):\n        return 'active'\n    return ''\n@register.simple_tag(takes_context=True)",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "convert_to_json",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def convert_to_json(context, string):\n    print(type(json.loads(string)))\n    return json.loads(string)\n@register.filter\ndef convert_json(value):\n    return json.loads(value)\n@register.filter\ndef handle_none(value):\n    if value:\n        return value",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "convert_json",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def convert_json(value):\n    return json.loads(value)\n@register.filter\ndef handle_none(value):\n    if value:\n        return value\n    return '-'\n@register.filter\ndef handle_none_blank(value):\n    if value:",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "handle_none",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def handle_none(value):\n    if value:\n        return value\n    return '-'\n@register.filter\ndef handle_none_blank(value):\n    if value:\n        return value\n    return ''\n@register.filter",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "handle_none_blank",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def handle_none_blank(value):\n    if value:\n        return value\n    return ''\n@register.filter\ndef handle_none_n_a(value):\n    if value == 'na':\n        return 'N/A'\n    if value == 'NA':\n        return 'N/A'",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "handle_none_n_a",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def handle_none_n_a(value):\n    if value == 'na':\n        return 'N/A'\n    if value == 'NA':\n        return 'N/A'\n    if value:\n        return value\n    return 'N/A'\n@register.filter\ndef format_space(value):",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "format_space",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def format_space(value):\n    try:\n        text = ''.join(' ' + char if char.isupper() else char.strip() for char in value).strip()\n        return text\n    except:\n        return value\n@register.filter\ndef handle_rate(value):\n    if value:\n        rate = ' ' + '$' + str(value)",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "handle_rate",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def handle_rate(value):\n    if value:\n        rate = ' ' + '$' + str(value)\n        return rate\n    else:\n        return 'N/A'\n@register.filter\ndef get_class_subjects(class_obj):\n    return class_obj.subjects.filter(is_active=True)\n@register.filter",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "get_class_subjects",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def get_class_subjects(class_obj):\n    return class_obj.subjects.filter(is_active=True)\n@register.filter\ndef get_class_subjects_videos(subject):\n    return subject.videos.filter(is_active=True)",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "get_class_subjects_videos",
        "kind": 2,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "def get_class_subjects_videos(subject):\n    return subject.videos.filter(is_active=True)",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "theme.templatetags.themetags",
        "description": "theme.templatetags.themetags",
        "peekOfCode": "register = template.Library()\n@register.simple_tag(takes_context=True)\ndef active(context, pattern_or_urlname):\n    try:\n        pattern = '^' + reverse(pattern_or_urlname)\n    except NoReverseMatch:\n        pattern = pattern_or_urlname\n    path = context['request'].path\n    if re.search(pattern, path):\n        return 'active'",
        "detail": "theme.templatetags.themetags",
        "documentation": {}
    },
    {
        "label": "ThemeConfig",
        "kind": 6,
        "importPath": "theme.apps",
        "description": "theme.apps",
        "peekOfCode": "class ThemeConfig(AppConfig):\n    name = 'theme'",
        "detail": "theme.apps",
        "documentation": {}
    }
]